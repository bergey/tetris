// Generated by psc version 0.6.9.3
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function numDiv(n1) {
      return function(n2) {
        return n1 / n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;
    
    function numShl(n1) {
      return function(n2) {
        return n1 << n2;
      };
    }
    ;
    
    function numShr(n1) {
      return function(n2) {
        return n1 >> n2;
      };
    }
    ;
    
    function numZshr(n1) {
      return function(n2) {
        return n1 >>> n2;
      };
    }
    ;
    
    function numAnd(n1) {
      return function(n2) {
        return n1 & n2;
      };
    }
    ;
    
    function numOr(n1) {
      return function(n2) {
        return n1 | n2;
      };
    }
    ;
    
    function numXor(n1) {
      return function(n2) {
        return n1 ^ n2;
      };
    }
    ;
    
    function numComplement(n) {
      return ~n;
    }
    ;
    
    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;
    
    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;
    
    function boolNot(b) {
      return !b;
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var LT = (function () {
        function LT() {

        };
        LT.value = new LT();
        return LT;
    })();
    var GT = (function () {
        function GT() {

        };
        GT.value = new GT();
        return GT;
    })();
    var EQ = (function () {
        function EQ() {

        };
        EQ.value = new EQ();
        return EQ;
    })();
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    var ModuloSemiring = function ($div, __superclass_Prelude$dotSemiring_0, mod) {
        this["/"] = $div;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
        this.mod = mod;
    };
    var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
        this["-"] = $minus;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Ord = function (__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    var Bits = function ($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
        this[".&."] = $dot$amp$dot;
        this[".^."] = $dot$up$dot;
        this[".|."] = $dot$bar$dot;
        this.complement = complement;
        this.shl = shl;
        this.shr = shr;
        this.zshr = zshr;
    };
    var BoolLike = function ($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $div$eq = function (dict) {
        return dict["/="];
    };
    var $div = function (dict) {
        return dict["/"];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var zero = function (dict) {
        return dict.zero;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var showNumber = new Show(showNumberImpl);
    var show = function (dict) {
        return dict.show;
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupString = new Semigroup(concatString);
    var ringNumber = new Ring(numSub, function () {
        return semiringNumber;
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var otherwise = true;
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (__dict_Ring_6) {
        return function (a) {
            return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
        };
    };
    var moduloSemiringNumber = new ModuloSemiring(numDiv, function () {
        return semiringNumber;
    }, function (_48) {
        return function (_49) {
            return 0;
        };
    });
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var $$const = function (a) {
        return function (_44) {
            return a;
        };
    };
    var $$void = function (__dict_Functor_10) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_10)($$const(unit))(fa);
        };
    };
    var complement = function (dict) {
        return dict.complement;
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _351 = compare(__dict_Ord_12)(a1)(a2);
                if (_351 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $greater$eq = function (__dict_Ord_15) {
        return function (a1) {
            return function (a2) {
                var _352 = compare(__dict_Ord_15)(a1)(a2);
                if (_352 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_16)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        Semigroup: Semigroup, 
        BoolLike: BoolLike, 
        Bits: Bits, 
        Ord: Ord, 
        Eq: Eq, 
        Ring: Ring, 
        ModuloSemiring: ModuloSemiring, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        not: not, 
        "||": $bar$bar, 
        "&&": $amp$amp, 
        complement: complement, 
        ">=": $greater$eq, 
        "<": $less, 
        compare: compare, 
        "/=": $div$eq, 
        negate: negate, 
        "-": $minus, 
        "/": $div, 
        "*": $times, 
        zero: zero, 
        "+": $plus, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "void": $$void, 
        "<$>": $less$dollar$greater, 
        show: show, 
        "$": $dollar, 
        id: id, 
        "<<<": $less$less$less, 
        "const": $$const, 
        otherwise: otherwise, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        showNumber: showNumber, 
        semiringNumber: semiringNumber, 
        ringNumber: ringNumber, 
        moduloSemiringNumber: moduloSemiringNumber, 
        eqNumber: eqNumber, 
        ordNumber: ordNumber, 
        bitsNumber: bitsNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.Prelude_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function unsafeIndex(xs) {
      return function(n) {
        return xs[n];
      };
    }
    ;
    return {
        unsafeIndex: unsafeIndex
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;
    return {
        runFn3: runFn3
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Random = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $$Math = PS.$$Math;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function random() {
    return Math.random();
  }
  ;
    return {
        random: random
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Ref = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function newRef(val) {
    return function () {
      return { value: val };
    };
  }
;
    
  function readRef(ref) {
    return function() {
      return ref.value;
    };
  }
;
    
  function modifyRef$prime(ref) {
    return function(f) {
      return function() {
        var t = f(ref.value);
        ref.value = t.newState;
        return t.retVal;
      };
    };
  }
;
    
  function writeRef(ref) {
    return function(val) {
      return function() {
        ref.value = val;
        return {};
      };
    };
  }
;
    var modifyRef = function (ref) {
        return function (f) {
            return modifyRef$prime(ref)(function (s) {
                return {
                    newState: f(s), 
                    retVal: Prelude.unit
                };
            });
        };
    };
    return {
        writeRef: writeRef, 
        modifyRef: modifyRef, 
        "modifyRef'": modifyRef$prime, 
        readRef: readRef, 
        newRef: newRef
    };
})();
var PS = PS || {};
PS.Control_Timer = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function timeout(time){
    return function(fn){
      return function(){
        return window.setTimeout(function(){
          fn();
        }, time);
      };
    };
  }
;
    return {
        timeout: timeout
    };
})();
var PS = PS || {};
PS.Tetris_Error = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Debug_Trace = PS.Debug_Trace;
    function error(s) {  console.log(s);};
    return {
        error: error
    };
})();
var PS = PS || {};
PS.Keymaster = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var DOM = PS.DOM;
    
  function bindKey(keys) {
    return function(fn) {
      return function() {
       key(keys, fn);
      };
    };
}
;
    return {
        bindKey: bindKey
    };
})();
var PS = PS || {};
PS.Control_Bind = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $eq$less$less = function (__dict_Bind_43) {
        return function (f) {
            return function (m) {
                return Prelude[">>="](__dict_Bind_43)(m)(f);
            };
        };
    };
    return {
        "=<<": $eq$less$less
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $times$greater = function (__dict_Apply_48) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_48)(Prelude["<$>"](__dict_Apply_48["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
            };
        };
    };
    return {
        "*>": $times$greater
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    var maybe = function (b) {
        return function (f) {
            return function (_89) {
                if (_89 instanceof Nothing) {
                    return b;
                };
                if (_89 instanceof Just) {
                    return f(_89.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isNothing = maybe(true)(Prelude["const"](false));
    var isJust = maybe(false)(Prelude["const"](true));
    var functorMaybe = new Prelude.Functor(function (fn) {
        return function (_90) {
            if (_90 instanceof Just) {
                return new Just(fn(_90.value0));
            };
            return Nothing.value;
        };
    });
    var applyMaybe = new Prelude.Apply(function (_91) {
        return function (x) {
            if (_91 instanceof Just) {
                return Prelude["<$>"](functorMaybe)(_91.value0)(x);
            };
            if (_91 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorMaybe;
    });
    var bindMaybe = new Prelude.Bind(function (_92) {
        return function (k) {
            if (_92 instanceof Just) {
                return k(_92.value0);
            };
            if (_92 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return applyMaybe;
    });
    return {
        Nothing: Nothing, 
        Just: Just, 
        isNothing: isNothing, 
        isJust: isJust, 
        maybe: maybe, 
        functorMaybe: functorMaybe, 
        applyMaybe: applyMaybe, 
        bindMaybe: bindMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function length (xs) {  return xs.length;};
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    var $dot$dot = range;
    var $bang$bang = function (xs) {
        return function (n) {
            var isInt = function (n_1) {
                return n_1 !== ~~n_1;
            };
            var _368 = n < 0 || (n >= length(xs) || isInt(n));
            if (_368) {
                return Data_Maybe.Nothing.value;
            };
            if (!_368) {
                return new Data_Maybe.Just(xs[n]);
            };
            throw new Error("Failed pattern match");
        };
    };
    var semigroupArray = new Prelude.Semigroup(append);
    var modifyAt = function (i) {
        return function (f) {
            return function (xs) {
                var _369 = $bang$bang(xs)(i);
                if (_369 instanceof Data_Maybe.Just) {
                    return updateAt(i)(f(_369.value0))(xs);
                };
                if (_369 instanceof Data_Maybe.Nothing) {
                    return xs;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var head = function (xs) {
        return $bang$bang(xs)(0);
    };
    var functorArray = new Prelude.Functor(map);
    return {
        range: range, 
        filter: filter, 
        modifyAt: modifyAt, 
        updateAt: updateAt, 
        append: append, 
        length: length, 
        map: map, 
        head: head, 
        "..": $dot$dot, 
        "!!": $bang$bang, 
        functorArray: functorArray, 
        semigroupArray: semigroupArray
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var monoidArray = new Monoid(function () {
        return Data_Array.semigroupArray;
    }, [  ]);
    var mempty = function (dict) {
        return dict.mempty;
    };
    return {
        Monoid: Monoid, 
        mempty: mempty, 
        monoidArray: monoidArray
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Data_Tuple = PS.Data_Tuple;
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  }
  ;
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  }
  ;
    var Foldable = function (foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    var foldr = function (dict) {
        return dict.foldr;
    };
    var traverse_ = function (__dict_Applicative_270) {
        return function (__dict_Foldable_271) {
            return function (f) {
                return foldr(__dict_Foldable_271)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_270["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_270)(Prelude.unit));
            };
        };
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var or = function (__dict_Foldable_280) {
        return foldl(__dict_Foldable_280)(Prelude["||"](Prelude.boolLikeBoolean))(false);
    };
    var foldableArray = new Foldable(function (__dict_Monoid_288) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_288["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_288))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    var foldMap = function (dict) {
        return dict.foldMap;
    };
    var any = function (__dict_Foldable_297) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_297)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    var and = function (__dict_Foldable_302) {
        return foldl(__dict_Foldable_302)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
    };
    var all = function (__dict_Foldable_303) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_303)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    return {
        Foldable: Foldable, 
        foldlArray: foldlArray, 
        foldrArray: foldrArray, 
        all: all, 
        any: any, 
        or: or, 
        and: and, 
        traverse_: traverse_, 
        foldMap: foldMap, 
        foldl: foldl, 
        foldr: foldr, 
        foldableArray: foldableArray
    };
})();
var PS = PS || {};
PS.Graphics_Canvas = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    function getCanvasElementByIdImpl(id, Just, Nothing) {
    return function() {
      var el = document.getElementById(id);
      if (el && el instanceof HTMLCanvasElement) {
        return Just(el);
      } else {
        return Nothing;
      }
    };
  };
    function getContext2D(c) {  return function() {    return c.getContext('2d');  };};
    function setFillStyle(style) {  return function(ctx) {    return function() {      ctx.fillStyle = style;      return ctx;    };  };};
    function beginPath(ctx) {  return function() {    ctx.beginPath();    return ctx;  };};
    function fill(ctx) {  return function() {    ctx.fill();    return ctx;  };};
    function rect(ctx) {  return function(r) {    return function() {      ctx.rect(r.x, r.y, r.w, r.h);      return ctx;    };  };};
    function clearRect(ctx) {  return function(r) {    return function() {      ctx.clearRect(r.x, r.y, r.w, r.h);      return ctx;    };  };};
    function translate(t) {  return function(ctx) {    return function() {      ctx.translate(t.translateX, t.translateY);      return ctx;    };  };};
    function setFont(fontspec) {  return function(ctx) {    return function() {      ctx.font = fontspec;      return ctx;    };  };};
    function fillText(ctx) {  return function(text) {    return function(x) {      return function(y) {        return function() {          ctx.fillText(text, x, y);          return ctx;        };      };    };  };};
    function save(ctx) {  return function() {    ctx.save();    return ctx;  };};
    function restore(ctx) {  return function() {    ctx.restore();    return ctx;  };};
    var withContext = function (ctx) {
        return function (action) {
            return function __do() {
                save(ctx)();
                var _34 = action();
                restore(ctx)();
                return _34;
            };
        };
    };
    var getCanvasElementById = function (elId) {
        return getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
    };
    var fillPath = function (ctx) {
        return function (path) {
            return function __do() {
                beginPath(ctx)();
                var _33 = path();
                fill(ctx)();
                return _33;
            };
        };
    };
    return {
        withContext: withContext, 
        restore: restore, 
        save: save, 
        fillText: fillText, 
        setFont: setFont, 
        translate: translate, 
        clearRect: clearRect, 
        rect: rect, 
        fillPath: fillPath, 
        fill: fill, 
        beginPath: beginPath, 
        setFillStyle: setFillStyle, 
        getContext2D: getContext2D, 
        getCanvasElementById: getCanvasElementById
    };
})();
var PS = PS || {};
PS.Tetris_Types = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var O = (function () {
        function O() {

        };
        O.value = new O();
        return O;
    })();
    var L = (function () {
        function L() {

        };
        L.value = new L();
        return L;
    })();
    var G = (function () {
        function G() {

        };
        G.value = new G();
        return G;
    })();
    var T = (function () {
        function T() {

        };
        T.value = new T();
        return T;
    })();
    var I = (function () {
        function I() {

        };
        I.value = new I();
        return I;
    })();
    var S = (function () {
        function S() {

        };
        S.value = new S();
        return S;
    })();
    var Z = (function () {
        function Z() {

        };
        Z.value = new Z();
        return Z;
    })();
    var North = (function () {
        function North() {

        };
        North.value = new North();
        return North;
    })();
    var South = (function () {
        function South() {

        };
        South.value = new South();
        return South;
    })();
    var East = (function () {
        function East() {

        };
        East.value = new East();
        return East;
    })();
    var West = (function () {
        function West() {

        };
        West.value = new West();
        return West;
    })();
    var screen = {
        cellSize: 10, 
        textSize: 18, 
        gutter: 10, 
        lineSpacing: 24
    };
    var pos = function (x) {
        return function (y) {
            return {
                x: x, 
                y: y
            };
        };
    };
    return {
        North: North, 
        South: South, 
        East: East, 
        West: West, 
        O: O, 
        L: L, 
        G: G, 
        T: T, 
        I: I, 
        S: S, 
        Z: Z, 
        screen: screen, 
        pos: pos
    };
})();
var PS = PS || {};
PS.Tetris_Logic = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Array = PS.Data_Array;
    var Tetris_Types = PS.Tetris_Types;
    var Data_Maybe = PS.Data_Maybe;
    var Tetris_Error = PS.Tetris_Error;
    var Control_Monad_Eff_Random = PS.Control_Monad_Eff_Random;
    var Data_Tuple = PS.Data_Tuple;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var updateBoard = function (c) {
        return function (p) {
            return function (bd) {
                return Data_Array.modifyAt(p.y)(Data_Array.updateAt(p.x)(c))(bd);
            };
        };
    };
    var replicate = function (n) {
        return function (a) {
            var _373 = n < 1;
            if (_373) {
                return [  ];
            };
            if (!_373) {
                return Data_Array.map(function (_343) {
                    return a;
                })(Data_Array[".."](1)(n));
            };
            throw new Error("Failed pattern match");
        };
    };
    var reorient = function (_344) {
        return function (p) {
            if (_344 instanceof Tetris_Types.North) {
                return p;
            };
            if (_344 instanceof Tetris_Types.West) {
                return {
                    x: -1 * p.y, 
                    y: p.x
                };
            };
            if (_344 instanceof Tetris_Types.South) {
                return {
                    x: -1 * p.x, 
                    y: -1 * p.y
                };
            };
            if (_344 instanceof Tetris_Types.East) {
                return {
                    x: p.y, 
                    y: -1 * p.x
                };
            };
            throw new Error("Failed pattern match");
        };
    };
    var randomShape = (function () {
        var cdf = function (x) {
            if (x < 1 / 7) {
                return Tetris_Types.O.value;
            };
            if (x < 2 / 7) {
                return Tetris_Types.L.value;
            };
            if (x < 3 / 7) {
                return Tetris_Types.G.value;
            };
            if (x < 4 / 7) {
                return Tetris_Types.T.value;
            };
            if (x < 5 / 7) {
                return Tetris_Types.I.value;
            };
            if (x < 6 / 7) {
                return Tetris_Types.S.value;
            };
            if (Prelude.otherwise) {
                return Tetris_Types.Z.value;
            };
            throw new Error("Failed pattern match");
        };
        return Prelude["<$>"](Control_Monad_Eff.functorEff)(cdf)(Control_Monad_Eff_Random.random);
    })();
    var plus = function (u) {
        return function (v) {
            return {
                x: u.x + v.x, 
                y: u.y + v.y
            };
        };
    };
    var lookupCell$prime = function (bd) {
        return function (p) {
            return Prelude[">>="](Data_Maybe.bindMaybe)(Data_Array["!!"](bd)(p.y))(function (_36) {
                return Data_Array["!!"](_36)(p.x);
            });
        };
    };
    var validPos = function (bd) {
        return function (p) {
            return Data_Maybe.maybe(false)(Data_Maybe.isNothing)(lookupCell$prime(bd)(p));
        };
    };
    var initialPosition = {
        x: 4, 
        y: 0
    };
    var gameOver = function (gs) {
        var _379 = Data_Array.head(gs.board);
        if (_379 instanceof Data_Maybe.Nothing) {
            return true;
        };
        if (_379 instanceof Data_Maybe.Just) {
            return Data_Foldable.any(Data_Foldable.foldableArray)(Data_Maybe.isJust)(_379.value0);
        };
        throw new Error("Failed pattern match");
    };
    var descend = function (gs) {
        var _383 = {};
        for (var _384 in gs) {
            if (gs.hasOwnProperty(_384)) {
                _383[_384] = gs[_384];
            };
        };
        _383.current = (function () {
            var _381 = {};
            for (var _382 in gs.current) {
                if (gs.current.hasOwnProperty(_382)) {
                    _381[_382] = gs.current[_382];
                };
            };
            _381.position = plus(gs.current.position)({
                x: 0, 
                y: 1
            });
            return _381;
        })();
        return _383;
    };
    var clockwise = function (_345) {
        if (_345 instanceof Tetris_Types.North) {
            return Tetris_Types.East.value;
        };
        if (_345 instanceof Tetris_Types.East) {
            return Tetris_Types.South.value;
        };
        if (_345 instanceof Tetris_Types.South) {
            return Tetris_Types.West.value;
        };
        if (_345 instanceof Tetris_Types.West) {
            return Tetris_Types.North.value;
        };
        throw new Error("Failed pattern match");
    };
    var cells = function (p) {
        return Prelude["<$>"](Data_Array.functorArray)(Prelude["<<<"](Prelude.semigroupoidArr)(plus(p.position))(reorient(p.orientation)))((function () {
            if (p.shape instanceof Tetris_Types.O) {
                return [ Tetris_Types.pos(0)(0), Tetris_Types.pos(1)(0), Tetris_Types.pos(0)(1), Tetris_Types.pos(1)(1) ];
            };
            if (p.shape instanceof Tetris_Types.L) {
                return [ Tetris_Types.pos(-1)(0), Tetris_Types.pos(0)(0), Tetris_Types.pos(1)(0), Tetris_Types.pos(-1)(1) ];
            };
            if (p.shape instanceof Tetris_Types.G) {
                return [ Tetris_Types.pos(-1)(0), Tetris_Types.pos(0)(0), Tetris_Types.pos(1)(0), Tetris_Types.pos(1)(1) ];
            };
            if (p.shape instanceof Tetris_Types.T) {
                return [ Tetris_Types.pos(-1)(0), Tetris_Types.pos(0)(0), Tetris_Types.pos(1)(0), Tetris_Types.pos(0)(1) ];
            };
            if (p.shape instanceof Tetris_Types.I) {
                return [ Tetris_Types.pos(-1)(0), Tetris_Types.pos(0)(0), Tetris_Types.pos(1)(0), Tetris_Types.pos(2)(0) ];
            };
            if (p.shape instanceof Tetris_Types.S) {
                return [ Tetris_Types.pos(0)(0), Tetris_Types.pos(1)(0), Tetris_Types.pos(-1)(1), Tetris_Types.pos(0)(1) ];
            };
            if (p.shape instanceof Tetris_Types.Z) {
                return [ Tetris_Types.pos(-1)(0), Tetris_Types.pos(0)(0), Tetris_Types.pos(0)(1), Tetris_Types.pos(1)(1) ];
            };
            throw new Error("Failed pattern match");
        })());
    };
    var installPiece = function (pc) {
        return function (bd) {
            return Data_Foldable.foldrArray(updateBoard(new Data_Maybe.Just(pc.shape)))(bd)(cells(pc));
        };
    };
    var rotatePieceCW = function (gs) {
        var newP = (function () {
            var _387 = {};
            for (var _388 in gs.current) {
                if (gs.current.hasOwnProperty(_388)) {
                    _387[_388] = gs.current[_388];
                };
            };
            _387.orientation = clockwise(gs.current.orientation);
            return _387;
        })();
        var _389 = Data_Foldable.all(Data_Foldable.foldableArray)(validPos(gs.board))(cells(newP));
        if (_389) {
            var _390 = {};
            for (var _391 in gs) {
                if (gs.hasOwnProperty(_391)) {
                    _390[_391] = gs[_391];
                };
            };
            _390.current = newP;
            return _390;
        };
        if (!_389) {
            return gs;
        };
        throw new Error("Failed pattern match");
    };
    var validMove = function (dp) {
        return function (gs) {
            return Data_Foldable.all(Data_Foldable.foldableArray)(validPos(gs.board))(cells((function () {
                var _392 = {};
                for (var _393 in gs.current) {
                    if (gs.current.hasOwnProperty(_393)) {
                        _392[_393] = gs.current[_393];
                    };
                };
                _392.position = plus(gs.current.position)(dp);
                return _392;
            })()));
        };
    };
    var movePiece = function (dp) {
        return function (gs) {
            var _394 = validMove(dp)(gs);
            if (_394) {
                var _397 = {};
                for (var _398 in gs) {
                    if (gs.hasOwnProperty(_398)) {
                        _397[_398] = gs[_398];
                    };
                };
                _397.current = (function () {
                    var _395 = {};
                    for (var _396 in gs.current) {
                        if (gs.current.hasOwnProperty(_396)) {
                            _395[_396] = gs.current[_396];
                        };
                    };
                    _395.position = plus(gs.current.position)(dp);
                    return _395;
                })();
                return _397;
            };
            if (!_394) {
                return gs;
            };
            throw new Error("Failed pattern match");
        };
    };
    var moveDown = movePiece({
        x: 0, 
        y: 1
    });
    var moveLeft = movePiece({
        x: -1, 
        y: 0
    });
    var moveRight = movePiece({
        x: 1, 
        y: 0
    });
    var canDescend = validMove({
        x: 0, 
        y: 1
    });
    var dropPiece = function (__copy_gs) {
        var gs = __copy_gs;
        tco: while (true) {
            var _399 = canDescend(gs);
            if (_399) {
                var __tco_gs = moveDown(gs);
                gs = __tco_gs;
                continue tco;
            };
            if (!_399) {
                return gs;
            };
            throw new Error("Failed pattern match");
        };
    };
    var blankRow = replicate(10)(Data_Maybe.Nothing.value);
    var clearRows = function (bd) {
        var kept = Data_Array.filter(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(Data_Foldable.all(Data_Foldable.foldableArray)(Data_Maybe.isJust)))(bd);
        var scored = 20 - Data_Array.length(kept);
        var blanks = replicate(scored)(blankRow);
        return {
            scored: scored, 
            bd: Data_Array.append(blanks)(kept)
        };
    };
    var endPiece = function (sh) {
        return function (gs) {
            var $$new = clearRows(installPiece(gs.current)(gs.board));
            var _400 = {};
            for (var _401 in gs) {
                if (gs.hasOwnProperty(_401)) {
                    _400[_401] = gs[_401];
                };
            };
            _400.current = {
                shape: gs.next, 
                position: initialPosition, 
                orientation: Tetris_Types.North.value
            };
            _400.next = sh;
            _400.board = $$new.bd;
            _400.piecesUsed = gs.piecesUsed + 1;
            _400.rowsFinished = gs.rowsFinished + $$new.scored;
            return _400;
        };
    };
    var stepGame = function (gs) {
        var _402 = canDescend(gs);
        if (_402) {
            return Prelude["return"](Control_Monad_Eff.monadEff)(descend(gs));
        };
        if (!_402) {
            return function __do() {
                var _35 = randomShape();
                return endPiece(_35)(gs);
            };
        };
        throw new Error("Failed pattern match");
    };
    var initialGameState = function (first) {
        return function (second) {
            return {
                current: {
                    shape: first, 
                    position: initialPosition, 
                    orientation: Tetris_Types.North.value
                }, 
                next: second, 
                board: replicate(20)(blankRow), 
                piecesUsed: 1, 
                rowsFinished: 0
            };
        };
    };
    return {
        gameOver: gameOver, 
        rotatePieceCW: rotatePieceCW, 
        clockwise: clockwise, 
        moveDown: moveDown, 
        moveRight: moveRight, 
        moveLeft: moveLeft, 
        movePiece: movePiece, 
        dropPiece: dropPiece, 
        replicate: replicate, 
        randomShape: randomShape, 
        "lookupCell'": lookupCell$prime, 
        validPos: validPos, 
        descend: descend, 
        canDescend: canDescend, 
        validMove: validMove, 
        clearRows: clearRows, 
        plus: plus, 
        reorient: reorient, 
        cells: cells, 
        updateBoard: updateBoard, 
        installPiece: installPiece, 
        endPiece: endPiece, 
        stepGame: stepGame, 
        blankRow: blankRow, 
        initialPosition: initialPosition, 
        initialGameState: initialGameState
    };
})();
var PS = PS || {};
PS.Tetris_Render = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Tetris_Types = PS.Tetris_Types;
    var Data_Foldable = PS.Data_Foldable;
    var Tetris_Logic = PS.Tetris_Logic;
    var Graphics_Canvas = PS.Graphics_Canvas;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Maybe = PS.Data_Maybe;
    var scoreArea = {
        x: 10 * Tetris_Types.screen.cellSize, 
        y: 0, 
        w: 100, 
        h: 100
    };
    var renderScore = function (ctx) {
        return function (gs) {
            return Graphics_Canvas.withContext(ctx)(function __do() {
                Graphics_Canvas.setFillStyle("black")(ctx)();
                Graphics_Canvas.setFont("10px sans-serif")(ctx)();
                Graphics_Canvas.clearRect(ctx)(scoreArea)();
                Graphics_Canvas.translate({
                    translateX: scoreArea.x, 
                    translateY: scoreArea.y + Tetris_Types.screen.lineSpacing
                })(ctx)();
                Graphics_Canvas.fillText(ctx)("rows: " + Prelude.show(Prelude.showNumber)(gs.rowsFinished))(Tetris_Types.screen.gutter)(0)();
                Graphics_Canvas.translate({
                    translateX: 0, 
                    translateY: Tetris_Types.screen.lineSpacing
                })(ctx)();
                return Graphics_Canvas.fillText(ctx)("pieces: " + Prelude.show(Prelude.showNumber)(gs.piecesUsed))(Tetris_Types.screen.gutter)(0)();
            });
        };
    };
    var color = function (_346) {
        if (_346 instanceof Data_Maybe.Nothing) {
            return "gray";
        };
        if (_346 instanceof Data_Maybe.Just && _346.value0 instanceof Tetris_Types.O) {
            return "red";
        };
        if (_346 instanceof Data_Maybe.Just && _346.value0 instanceof Tetris_Types.L) {
            return "darkgoldenrod";
        };
        if (_346 instanceof Data_Maybe.Just && _346.value0 instanceof Tetris_Types.G) {
            return "aquamarine";
        };
        if (_346 instanceof Data_Maybe.Just && _346.value0 instanceof Tetris_Types.T) {
            return "deeppink";
        };
        if (_346 instanceof Data_Maybe.Just && _346.value0 instanceof Tetris_Types.I) {
            return "forestgreen";
        };
        if (_346 instanceof Data_Maybe.Just && _346.value0 instanceof Tetris_Types.S) {
            return "royalblue";
        };
        if (_346 instanceof Data_Maybe.Just && _346.value0 instanceof Tetris_Types.Z) {
            return "blueviolet";
        };
        throw new Error("Failed pattern match");
    };
    var renderCell = function (ctx) {
        return function (c) {
            return function __do() {
                Graphics_Canvas.setFillStyle(color(c))(ctx)();
                Graphics_Canvas.fillPath(ctx)(Graphics_Canvas.rect(ctx)({
                    x: 0, 
                    y: 0, 
                    w: Tetris_Types.screen.cellSize, 
                    h: Tetris_Types.screen.cellSize
                }))();
                return Graphics_Canvas.translate({
                    translateX: Tetris_Types.screen.cellSize, 
                    translateY: 0
                })(ctx)();
            };
        };
    };
    var renderRow = function (ctx) {
        return function (row) {
            return function __do() {
                Graphics_Canvas.withContext(ctx)(Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(renderCell(ctx))(row))();
                return Graphics_Canvas.translate({
                    translateX: 0, 
                    translateY: Tetris_Types.screen.cellSize
                })(ctx)();
            };
        };
    };
    var renderBoard = function (ctx) {
        return function (bd) {
            return Graphics_Canvas.withContext(ctx)(Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(renderRow(ctx))(bd));
        };
    };
    var renderShape = function (ctx) {
        return function (sh) {
            return function (p) {
                return function __do() {
                    Graphics_Canvas.setFillStyle(color(new Data_Maybe.Just(sh)))(ctx)();
                    return Graphics_Canvas.fillPath(ctx)(Graphics_Canvas.rect(ctx)({
                        x: Tetris_Types.screen.cellSize * p.x, 
                        y: Tetris_Types.screen.cellSize * p.y, 
                        w: Tetris_Types.screen.cellSize, 
                        h: Tetris_Types.screen.cellSize
                    }))();
                };
            };
        };
    };
    var renderPiece = function (ctx) {
        return function (pc) {
            return Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(renderShape(ctx)(pc.shape))(Tetris_Logic.cells(pc));
        };
    };
    var renderGame = function (ctx) {
        return function (gs) {
            return function __do() {
                renderScore(ctx)(gs)();
                renderBoard(ctx)(gs.board)();
                return renderPiece(ctx)(gs.current)();
            };
        };
    };
    return {
        renderScore: renderScore, 
        color: color, 
        renderCell: renderCell, 
        renderRow: renderRow, 
        renderBoard: renderBoard, 
        renderShape: renderShape, 
        renderPiece: renderPiece, 
        renderGame: renderGame, 
        scoreArea: scoreArea
    };
})();
var PS = PS || {};
PS.Context = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  var context;
  try      { context = Function('return this')() || (42, eval)('this'); } 
  catch(e) { context = window; }    
  function getContext(){ return context; }
;
    return {
        getContext: getContext
    };
})();
var PS = PS || {};
PS.Control_RAF = (function () {
    "use strict";
    var Context = PS.Context;
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  var rAF = null;

  function requestAnimationFrame_(getContext){
    return function(x){

      if(!rAF){
        rAF = (function(){
          var c = getContext();
          return  c.requestAnimationFrame       ||
                  c.webkitRequestAnimationFrame ||
                  c.mozRequestAnimationFrame    ||
                  function( callback ){
                    c.setTimeout(callback, 1000 / 60);
                  };
        })();
      }

      return function(){ return rAF(x); };

    }
  };

;
    var requestAnimationFrame = requestAnimationFrame_(Context.getContext);
    return {
        requestAnimationFrame: requestAnimationFrame, 
        requestAnimationFrame_: requestAnimationFrame_
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Graphics_Canvas = PS.Graphics_Canvas;
    var Control_Bind = PS.Control_Bind;
    var Control_Monad_Eff_Ref = PS.Control_Monad_Eff_Ref;
    var Tetris_Logic = PS.Tetris_Logic;
    var Keymaster = PS.Keymaster;
    var Control_Timer = PS.Control_Timer;
    var Tetris_Render = PS.Tetris_Render;
    var Control_RAF = PS.Control_RAF;
    var Tetris_Error = PS.Tetris_Error;
    var Tetris_Types = PS.Tetris_Types;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var stepLoop = function (gsRef) {
        return function (ms) {
            return function __do() {
                var _42 = Control_Monad_Eff_Ref.readRef(gsRef)();
                var _41 = Tetris_Logic.stepGame(_42)();
                Control_Monad_Eff_Ref.writeRef(gsRef)(_41)();
                var _414 = Tetris_Logic.gameOver(_41);
                if (_414) {
                    return Prelude.unit;
                };
                if (!_414) {
                    return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Timer.timeout(ms)(stepLoop(gsRef)(ms)))();
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var renderLoop = function (ctx) {
        return function (gsRef) {
            return function __do() {
                var _40 = Control_Monad_Eff_Ref.readRef(gsRef)();
                Tetris_Render.renderGame(ctx)(_40)();
                return Control_RAF.requestAnimationFrame(renderLoop(ctx)(gsRef))();
            };
        };
    };
    var noCanvasDie = function (name) {
        return function __do() {
            var _43 = Graphics_Canvas.getCanvasElementById(name)();
            return (function () {
                if (_43 instanceof Data_Maybe.Nothing) {
                    return Tetris_Error.error("Could not find canvas element in DOM.");
                };
                if (_43 instanceof Data_Maybe.Just) {
                    return Prelude["return"](Control_Monad_Eff.monadEff)(_43.value0);
                };
                throw new Error("Failed pattern match");
            })()();
        };
    };
    var main = function __do() {
        var _39 = noCanvasDie("game")();
        var _38 = Graphics_Canvas.getContext2D(_39)();
        var _37 = Control_Bind["=<<"](Control_Monad_Eff.bindEff)(Control_Monad_Eff_Ref.newRef)(Prelude["<*>"](Control_Monad_Eff.applyEff)(Prelude["<$>"](Control_Monad_Eff.functorEff)(Tetris_Logic.initialGameState)(Tetris_Logic.randomShape))(Tetris_Logic.randomShape))();
        Keymaster.bindKey("left")(Control_Monad_Eff_Ref.modifyRef(_37)(Tetris_Logic.moveLeft))();
        Keymaster.bindKey("right")(Control_Monad_Eff_Ref.modifyRef(_37)(Tetris_Logic.moveRight))();
        Keymaster.bindKey("down")(Control_Monad_Eff_Ref.modifyRef(_37)(Tetris_Logic.dropPiece))();
        Keymaster.bindKey("up")(Control_Monad_Eff_Ref.modifyRef(_37)(Tetris_Logic.rotatePieceCW))();
        renderLoop(_38)(_37)();
        return Control_Timer.timeout(250)(stepLoop(_37)(250))();
    };
    return {
        noCanvasDie: noCanvasDie, 
        stepLoop: stepLoop, 
        renderLoop: renderLoop, 
        main: main
    };
})();
